parameters:
	ignoreErrors:
		-
			message: '#^Call to function assert\(\) with true will always evaluate to true\.$#'
			identifier: function.alreadyNarrowedType
			count: 1
			path: src/contracts/Persistence/CriterionMapper/AbstractFieldCriterionMapper.php

		-
			message: '#^Instanceof between T of Ibexa\\Contracts\\CoreSearch\\Values\\Query\\Criterion\\FieldValueCriterion and Ibexa\\Contracts\\CoreSearch\\Values\\Query\\Criterion\\FieldValueCriterion will always evaluate to true\.$#'
			identifier: instanceof.alwaysTrue
			count: 1
			path: src/contracts/Persistence/CriterionMapper/AbstractFieldCriterionMapper.php

		-
			message: '#^Method Ibexa\\CoreSearch\\CriterionMapper\\LogicalAndCriterionMapper\:\:getType\(\) never returns ''NOT'' so it can be removed from the return type\.$#'
			identifier: return.unusedType
			count: 1
			path: src/lib/CriterionMapper/LogicalAndCriterionMapper.php

		-
			message: '#^Method Ibexa\\CoreSearch\\CriterionMapper\\LogicalAndCriterionMapper\:\:getType\(\) never returns ''OR'' so it can be removed from the return type\.$#'
			identifier: return.unusedType
			count: 1
			path: src/lib/CriterionMapper/LogicalAndCriterionMapper.php

		-
			message: '#^Method Ibexa\\CoreSearch\\CriterionMapper\\LogicalOrCriterionMapper\:\:getType\(\) never returns ''AND'' so it can be removed from the return type\.$#'
			identifier: return.unusedType
			count: 1
			path: src/lib/CriterionMapper/LogicalOrCriterionMapper.php

		-
			message: '#^Method Ibexa\\CoreSearch\\CriterionMapper\\LogicalOrCriterionMapper\:\:getType\(\) never returns ''NOT'' so it can be removed from the return type\.$#'
			identifier: return.unusedType
			count: 1
			path: src/lib/CriterionMapper/LogicalOrCriterionMapper.php
